<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>速虎前沿|THOOH</title>
  
  <subtitle>有志之人，立长志；无志志人，常立志</subtitle>
  <link href="https://blog.thooh.com/atom.xml" rel="self"/>
  
  <link href="https://blog.thooh.com/"/>
  <updated>2023-12-12T04:49:24.326Z</updated>
  <id>https://blog.thooh.com/</id>
  
  <author>
    <name>thooh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NMAP(Network Mapper)</title>
    <link href="https://blog.thooh.com/2023/12/30ef09bb7bb6.html"/>
    <id>https://blog.thooh.com/2023/12/30ef09bb7bb6.html</id>
    <published>2023-12-11T16:00:00.000Z</published>
    <updated>2023-12-12T04:49:24.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="NMAP"><a href="#NMAP" class="headerlink" title="NMAP"></a>NMAP</h2><p>Network exploration tool and security &#x2F; port scanner<br>网络探索工具和安全&#x2F;端口扫描器</p><h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><ol><li>interesting ports table：port number，protocol，service name, state</li><li>reverse DNS names</li><li>operating system guesses</li><li>device types</li><li>MAC addresses</li></ol><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p><a href="https://nmap.org/book/man-briefoptions.html">https://nmap.org/book/man-briefoptions.html</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap [&lt;Scan Type&gt; ...] [&lt;Options&gt;] &#123;&lt;target specification&gt;&#125;</span><br></pre></td></tr></table></figure><h4 id="Scan-type"><a href="#Scan-type" class="headerlink" title="Scan type"></a>Scan type</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># TCP SYN（隐形）扫描</span><br><span class="line">namp -sS</span><br><span class="line"></span><br><span class="line"># TCP 连接扫描</span><br><span class="line">namp -sT</span><br><span class="line"></span><br><span class="line"># UDP 扫描 ( `-sU` )</span><br><span class="line">namp -sU</span><br><span class="line"></span><br><span class="line"># 版本检测</span><br><span class="line">namp -sV</span><br><span class="line"></span><br><span class="line"># 启用操作系统检查</span><br><span class="line">nmap -O</span><br><span class="line"></span><br><span class="line"># 脚本引擎（NSE）</span><br><span class="line">nmap -sC</span><br><span class="line">nmap --script</span><br></pre></td></tr></table></figure><h4 id="Target-Specification"><a href="#Target-Specification" class="headerlink" title="Target Specification"></a>Target Specification</h4><p>IP address, hostname, CIDR, IPv6, or octet ranges</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 多个主机规范</span><br><span class="line">nmap scanme.nmap.org 192.168.0.0/8 10.0.0,1,3-7.-</span><br><span class="line"></span><br><span class="line"># 无DNS解析</span><br><span class="line">nmap -n</span><br></pre></td></tr></table></figure><h3 id="Port-Scanning-Basics"><a href="#Port-Scanning-Basics" class="headerlink" title="Port Scanning Basics"></a>Port Scanning Basics</h3><p><a href="https://nmap.org/book/man-port-scanning-basics.html">https://nmap.org/book/man-port-scanning-basics.html</a></p><ul><li>open</li><li>closed</li><li>filtered</li><li>unfiltered</li><li>open|filtered</li><li>closed|filtered</li></ul><h3 id="Timing-and-Performance"><a href="#Timing-and-Performance" class="headerlink" title="Timing and Performance"></a>Timing and Performance</h3><p><a href="https://nmap.org/book/man-performance.html">https://nmap.org/book/man-performance.html</a></p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 操作系统</span><br><span class="line">nmap -sS -n -O -T4 --osscan-guess --max-os-tries 1 --noninteractive 10.2.13.98  </span><br><span class="line">nmap -6 -sS -n -O -T5 --osscan-guess --max-os-tries 1 --noninteractive 2001::99  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># TCP</span><br><span class="line">nmap -n -T4 -sT  10.2.13.98  </span><br><span class="line">nmap -6 -n -T4 -sT 2001::99  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">​# TCP &amp; Version</span><br><span class="line">nmap -n -sT -T4 -sV 10.2.13.98  </span><br><span class="line">nmap -6 -n -sT -T4 -sV 2001::99  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># UDP</span><br><span class="line">nmap -n -T4 -sU  10.2.13.98  </span><br><span class="line">nmap -6 -n -T4 -sU 2001::99  </span><br><span class="line">​  </span><br><span class="line"></span><br><span class="line"># HTTP title​ </span><br><span class="line">nmap -n -T4 --script=http-title       10.2.13.98  </span><br><span class="line">nmap -6  -n -T4 --script=http-title   2001::99  </span><br><span class="line">​   </span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="https://nmap.org/book/man.html">https://nmap.org/book/man.html</a><br><a href="https://nmap.org/book/port-scanning-options.html#port-scanning-options-ports">https://nmap.org/book/port-scanning-options.html#port-scanning-options-ports</a></p>]]></content>
    
    
    <summary type="html">网络探索工具和安全/端口扫描器</summary>
    
    
    
    <category term="Linux" scheme="https://blog.thooh.com/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://blog.thooh.com/tags/Linux/"/>
    
    <category term="Software" scheme="https://blog.thooh.com/tags/Software/"/>
    
  </entry>
  
  <entry>
    <title>rpm-build</title>
    <link href="https://blog.thooh.com/2023/12/b8749c34d082.html"/>
    <id>https://blog.thooh.com/2023/12/b8749c34d082.html</id>
    <published>2023-12-11T16:00:00.000Z</published>
    <updated>2023-12-12T04:49:24.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>RPM 包管理器 （RPM） 是一个运行在 Red Hat Enterprise Linux、CentOS 和 Fedora 上的包管理系统。RPM 使您能够更轻松地分发、管理和更新为红帽企业 Linux、CentOS 和 Fedora 创建的软件。许多软件供应商通过传统的存档文件（如压缩包）分发他们的软件。但是，将软件打包到 RPM 包中有几个优点。这些优点概述如下。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># centos7</span><br><span class="line">yum install -y gcc rpm-build rpm-devel rpmlint make python bash coreutils diffutils patch rpmdevtools</span><br><span class="line"></span><br><span class="line"># Centos8</span><br><span class="line">dnf install -y gcc rpm-build rpm-devel rpmlint make python bash coreutils diffutils patch rpmdevtools</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 生成工作目录</span><br><span class="line">rpmdev-setuptree</span><br></pre></td></tr></table></figure><table><thead><tr><th>目录</th><th>宏</th><th>作用</th></tr></thead><tbody><tr><td>BUILD</td><td><code>%_buildder</code></td><td>用户存放解压后的源码，并源码的编译在该目录完成，会产生临时目录%buildroot</td></tr><tr><td>RPMS</td><td><code>%_rpmdir</code></td><td>存放生成的二进制rpm包</td></tr><tr><td>SOURCES</td><td><code>%_sourcedir</code></td><td>存放源代码压缩包和补丁</td></tr><tr><td>SRPMS</td><td><code>%_srcrpmdir</code></td><td>存放生成的源码rpm包</td></tr></tbody></table><h3 id="spec-文件"><a href="#spec-文件" class="headerlink" title=".spec 文件"></a>.spec 文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpmdev-newspec xxx</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>说明</th><th></th></tr></thead><tbody><tr><td>Name</td><td>软件名，应与SPEC文件名匹配</td><td></td></tr><tr><td>Version</td><td>软件上游版本号</td><td></td></tr><tr><td>Release</td><td>发布编号，默认：1%{?dist}</td><td></td></tr><tr><td>Summary</td><td>简要说明</td><td></td></tr><tr><td>License</td><td>软件包的协议版本，GPLv3+</td><td></td></tr><tr><td>URL</td><td>项目信息的网站</td><td></td></tr><tr><td>Source0</td><td>压缩包资源链接，如果需要，可以添加更多SourceX指令，每次地递增数据</td><td></td></tr><tr><td>Patch0</td><td>补丁包资源链接，如果需要，可以添加更多 PatchX 指令，每次递增数量</td><td></td></tr><tr><td>BuildArch</td><td>支持体系架构，如果完全使用解释性编程语言编写，请将其设置为noarch</td><td></td></tr><tr><td>ExcludeArch</td><td>排除体系架构</td><td></td></tr><tr><td>BuildRequires</td><td>%build阶段所需的各种依赖，逗号隔开</td><td></td></tr><tr><td>Requires</td><td>%install阶段所需的各种依赖</td><td></td></tr><tr><td>%description</td><td>完成描述，可跨越多行</td><td></td></tr><tr><td>%prep<br /><br />%setup -q</td><td>将SOURCE目录下的源码解压至BUILD目录下，为%build阶段做好准备，可执行shell脚本</td><td></td></tr><tr><td>%build</td><td>编译BUILD目录下的源码，生成二进制文件，为之后的%install阶段做好准备</td><td></td></tr><tr><td>%configure<br /><br />make <code>%&#123;?_smp_mflags&#125;</code></td><td></td><td></td></tr><tr><td>%install<br /><br />rm -rf $RPM_BUILD_ROOT<br /><br />%make_install</td><td>读取BUILD目录下需要安装的文件，将其预安装至BUILDROOT目录下，可加入脚本文件或者配置文件</td><td></td></tr><tr><td>%check</td><td>测试软件命令</td><td></td></tr><tr><td>%files</td><td>需要被打包的文件和目录</td><td></td></tr><tr><td>%doc</td><td></td><td></td></tr><tr><td>%changelog</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rpmbuild option xxx.spec</span><br><span class="line"></span><br><span class="line"># option</span><br><span class="line">-bp #只执行spec的%pre段(解开源码包并打补丁,即只做准备)</span><br><span class="line">-bc #执行spec的%pre和%build 段(准备并编译)</span><br><span class="line">-bi #执行spec中%pre,%build与%install(准备,编译并安装)</span><br><span class="line">-bl #检查spec中的%file段(查看文件是否齐全)</span><br><span class="line">-ba #建立源码与二进制包(常用):即编译后做成*.rpm和*.src.rpm</span><br><span class="line">-bb #只建立二进制包(常用):即编译后做成*.rpm</span><br><span class="line">-bs #只建立源码包:即只做成*.src.rpm</span><br></pre></td></tr></table></figure><h2 id="常用宏路径"><a href="#常用宏路径" class="headerlink" title="常用宏路径"></a>常用宏路径</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">%&#123;_sysconfdir&#125;       /etc</span><br><span class="line">%&#123;_prefix&#125;           /usr</span><br><span class="line">%&#123;_exec_prefix&#125;      %&#123;_prefix&#125;</span><br><span class="line">%&#123;_bindir&#125;           %&#123;_exec_prefix&#125;/bin</span><br><span class="line">%&#123;_libdir&#125;           %&#123;_exec_prefix&#125;/%&#123;_lib&#125;</span><br><span class="line">%&#123;_libexecdir&#125;       %&#123;_exec_prefix&#125;/libexec</span><br><span class="line">%&#123;_sbindir&#125;          %&#123;_exec_prefix&#125;/sbin</span><br><span class="line">%&#123;_sharedstatedir&#125;   /var/lib</span><br><span class="line">%&#123;_datarootdir&#125;      %&#123;_prefix&#125;/share</span><br><span class="line">%&#123;_datadir&#125;          %&#123;_datarootdir&#125;</span><br><span class="line">%&#123;_includedir&#125;       %&#123;_prefix&#125;/include</span><br><span class="line">%&#123;_infodir&#125;          /usr/share/info</span><br><span class="line">%&#123;_mandir&#125;           /usr/share/man</span><br><span class="line">%&#123;_localstatedir&#125;    /var</span><br><span class="line">%&#123;_initddir&#125;         %&#123;_sysconfdir&#125;/rc.d/init.d</span><br><span class="line">%&#123;_var&#125;              /var</span><br><span class="line">%&#123;_tmppath&#125;          %&#123;_var&#125;/tmp</span><br><span class="line">%&#123;_usr&#125;              /usr</span><br><span class="line">%&#123;_usrsrc&#125;           %&#123;_usr&#125;/src</span><br><span class="line">%&#123;_lib&#125;              lib (lib64 on 64bit multilib systems)</span><br><span class="line">%&#123;_docdir&#125;           %&#123;_datadir&#125;/doc</span><br><span class="line">%&#123;buildroot&#125;         %&#123;_buildrootdir&#125;/%&#123;name&#125;-%&#123;version&#125;-%&#123;release&#125;.%&#123;_arch&#125;</span><br><span class="line">$RPM_BUILD_ROOT      %&#123;buildroot&#125;</span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="https://rpm-packaging-guide.github.io/">https://rpm-packaging-guide.github.io/</a></p>]]></content>
    
    
    <summary type="html">RPM 包管理器 （RPM） 是一个运行在 Red Hat Enterprise Linux、CentOS 和 Fedora 上的包管理系统。</summary>
    
    
    
    <category term="Linux" scheme="https://blog.thooh.com/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>errors</title>
    <link href="https://blog.thooh.com/2023/12/2e9054e4bf80.html"/>
    <id>https://blog.thooh.com/2023/12/2e9054e4bf80.html</id>
    <published>2023-12-07T16:00:00.000Z</published>
    <updated>2023-12-12T04:49:24.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Go-内置-errors"><a href="#Go-内置-errors" class="headerlink" title="Go 内置 errors"></a>Go 内置 errors</h1><p>Go <code>error</code> 接口</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">type error interface &#123;</span><br><span class="line">Error() string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="error-创建"><a href="#error-创建" class="headerlink" title="error 创建"></a>error 创建</h1><h2 id="errors-New"><a href="#errors-New" class="headerlink" title="errors.New()"></a>errors.New()</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// http://golang.org/pkg/errors/error.go</span><br><span class="line">// errors 构建 error 对象</span><br><span class="line">type errorString struct &#123;</span><br><span class="line">    s string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (e *errorString) Error() string &#123;</span><br><span class="line">    return e.s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// New returns an error that formats as the given text.</span><br><span class="line">// Each call to New returns a distinct error value even if the text is identical.</span><br><span class="line">func New(text string) error &#123;</span><br><span class="line">return &amp;errorString&#123;text&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：返回的指针。指针对于值的优势：内容可能相同；比较性能</p><h2 id="fmt-Errof"><a href="#fmt-Errof" class="headerlink" title="fmt.Errof()"></a>fmt.Errof()</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">type wrapError struct &#123;</span><br><span class="line">msg string</span><br><span class="line">err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (e *wrapError) Error() string &#123;</span><br><span class="line">return e.msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (e *wrapError) Unwrap() error &#123;</span><br><span class="line">return e.err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Errorf formats according to a format specifier and returns the string as a</span><br><span class="line">// value that satisfies error.</span><br><span class="line">//</span><br><span class="line">// If the format specifier includes a %w verb with an error operand,</span><br><span class="line">// the returned error will implement an Unwrap method returning the operand. It is</span><br><span class="line">// invalid to include more than one %w verb or to supply it with an operand</span><br><span class="line">// that does not implement the error interface. The %w verb is otherwise</span><br><span class="line">// a synonym for %v.</span><br><span class="line">func Errorf(format string, a ...interface&#123;&#125;) error &#123;</span><br><span class="line">    p := newPrinter()</span><br><span class="line">    p.wrapErrs = true</span><br><span class="line">    p.doPrintf(format, a)</span><br><span class="line">    s := string(p.buf)</span><br><span class="line">    var err error</span><br><span class="line">    if p.wrappedErr == nil &#123;</span><br><span class="line">      err = errors.New(s)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      err = &amp;wrapError&#123;s, p.wrappedErr&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p.free()</span><br><span class="line">    return err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Go 内置 errors</summary>
    
    
    
    <category term="Golang" scheme="https://blog.thooh.com/categories/Golang/"/>
    
    
    <category term="golang" scheme="https://blog.thooh.com/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>统一错误码</title>
    <link href="https://blog.thooh.com/2023/12/01095d29bc65.html"/>
    <id>https://blog.thooh.com/2023/12/01095d29bc65.html</id>
    <published>2023-12-06T16:00:00.000Z</published>
    <updated>2023-12-12T04:49:24.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>错误处理一直以一是编程必需要面对的问题，错误处理如果做的好的话，代码的稳定性会很好。不同的语言有不同的出现处理的方式。</p><h1 id="Error-vs-Exception"><a href="#Error-vs-Exception" class="headerlink" title="Error vs Exception"></a>Error vs Exception</h1><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p>错误是程序中可能出现的问题，比如连接数据库失败，连接网络失败等，在程序设计中，<strong>错误处理是业务的一部分</strong>。</p><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p>异常是指在不该出现问题的地方出现问题，是预料之外的，比如空指针引用，下标越界，向空 map 添加键值等</p><h2 id="Panic"><a href="#Panic" class="headerlink" title="Panic"></a>Panic</h2><p>对于真正意外的情况，<strong>那些表示不可恢复的程序错误，不可恢复才使用 panic。对于其他的错误情况，我们应该是期望使用 error 来进行判定</strong></p><p>💡 go 源代码很多地方写 panic, 但是工程实践业务代码不要主动写 panic，理论上 panic 只存在于 server 启动阶段，比如 config 文件解析失败，端口监听失败等等，所有业务逻辑禁止主动 panic，所有异步的 goroutine 都要用 recover 去兜底处理。</p><h1 id="处理错误的方式"><a href="#处理错误的方式" class="headerlink" title="处理错误的方式"></a>处理错误的方式</h1><h2 id="经典GO逻辑"><a href="#经典GO逻辑" class="headerlink" title="经典GO逻辑"></a>经典GO逻辑</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">顺序处理每一步的error</span><br></pre></td></tr></table></figure><h2 id="屏蔽过程中的-error-的处理"><a href="#屏蔽过程中的-error-的处理" class="headerlink" title="屏蔽过程中的 error 的处理"></a>屏蔽过程中的 error 的处理</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">将error 保存到对象内部，处理逻辑交给每个方法，本质上仍是顺序执行</span><br></pre></td></tr></table></figure><h2 id="利用函数式编程延迟运行"><a href="#利用函数式编程延迟运行" class="headerlink" title="利用函数式编程延迟运行"></a>利用函数式编程延迟运行</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">错误交由调用方处理</span><br></pre></td></tr></table></figure><h1 id="三层架构错误处理"><a href="#三层架构错误处理" class="headerlink" title="三层架构错误处理"></a>三层架构错误处理</h1><p>结合 <a href="http://github.com/pkg/errors">github.com&#x2F;pkg&#x2F;errors</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Dao 层使用 Wrap 上抛错误</span><br><span class="line"></span><br><span class="line">Service 层追加信息</span><br><span class="line"></span><br><span class="line">MiddleWare 统一打印错误日志</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">错误处理一直以一是编程必需要面对的问题，错误处理如果做的好的话，代码的稳定性会很好。不同的语言有不同的出现处理的方式。</summary>
    
    
    
    <category term="Golang" scheme="https://blog.thooh.com/categories/Golang/"/>
    
    
    <category term="golang" scheme="https://blog.thooh.com/tags/golang/"/>
    
  </entry>
  
</feed>
