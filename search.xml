<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>/1970/01/2dad21b2590c.html</url>
    <content><![CDATA[<h1 id="Go-内置-errors"><a href="#Go-内置-errors" class="headerlink" title="Go 内置 errors"></a>Go 内置 errors</h1><p>Go <code>error</code> 接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type error interface &#123;</span><br><span class="line">	Error() string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="error-创建"><a href="#error-创建" class="headerlink" title="error 创建"></a>error 创建</h1><h2 id="errors-New"><a href="#errors-New" class="headerlink" title="errors.New()"></a>errors.New()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// http://golang.org/pkg/errors/error.go</span><br><span class="line">// errors 构建 error 对象</span><br><span class="line">type errorString struct &#123;</span><br><span class="line">    s string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (e *errorString) Error() string &#123;</span><br><span class="line">    return e.s</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// New returns an error that formats as the given text.</span><br><span class="line">// Each call to New returns a distinct error value even if the text is identical.</span><br><span class="line">func New(text string) error &#123;</span><br><span class="line">	return &amp;errorString&#123;text&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：返回的指针。指针对于值的优势：内容可能相同；比较性能</p>
<h2 id="fmt-Errof"><a href="#fmt-Errof" class="headerlink" title="fmt.Errof()"></a>fmt.Errof()</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">type wrapError struct &#123;</span><br><span class="line">	msg string</span><br><span class="line">	err error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (e *wrapError) Error() string &#123;</span><br><span class="line">	return e.msg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func (e *wrapError) Unwrap() error &#123;</span><br><span class="line">	return e.err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// Errorf formats according to a format specifier and returns the string as a</span><br><span class="line">// value that satisfies error.</span><br><span class="line">//</span><br><span class="line">// If the format specifier includes a %w verb with an error operand,</span><br><span class="line">// the returned error will implement an Unwrap method returning the operand. It is</span><br><span class="line">// invalid to include more than one %w verb or to supply it with an operand</span><br><span class="line">// that does not implement the error interface. The %w verb is otherwise</span><br><span class="line">// a synonym for %v.</span><br><span class="line">func Errorf(format string, a ...interface&#123;&#125;) error &#123;</span><br><span class="line">    p := newPrinter()</span><br><span class="line">    p.wrapErrs = true</span><br><span class="line">    p.doPrintf(format, a)</span><br><span class="line">    s := string(p.buf)</span><br><span class="line">    var err error</span><br><span class="line">    if p.wrappedErr == nil &#123;</span><br><span class="line">      err = errors.New(s)</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      err = &amp;wrapError&#123;s, p.wrappedErr&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    p.free()</span><br><span class="line">    return err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>统一错误码</title>
    <url>/2023/12/01095d29bc65.html</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>错误处理一直以一是编程必需要面对的问题，错误处理如果做的好的话，代码的稳定性会很好。不同的语言有不同的出现处理的方式。</p>
<h1 id="Error-vs-Exception"><a href="#Error-vs-Exception" class="headerlink" title="Error vs Exception"></a>Error vs Exception</h1><h2 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h2><p>错误是程序中可能出现的问题，比如连接数据库失败，连接网络失败等，在程序设计中，<strong>错误处理是业务的一部分</strong>。</p>
<h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h2><p>异常是指在不该出现问题的地方出现问题，是预料之外的，比如空指针引用，下标越界，向空 map 添加键值等</p>
<h2 id="Panic"><a href="#Panic" class="headerlink" title="Panic"></a>Panic</h2><p>对于真正意外的情况，<strong>那些表示不可恢复的程序错误，不可恢复才使用 panic。对于其他的错误情况，我们应该是期望使用 error 来进行判定</strong></p>
<p>💡 go 源代码很多地方写 panic, 但是工程实践业务代码不要主动写 panic，理论上 panic 只存在于 server 启动阶段，比如 config 文件解析失败，端口监听失败等等，所有业务逻辑禁止主动 panic，所有异步的 goroutine 都要用 recover 去兜底处理。</p>
<h1 id="处理错误的方式"><a href="#处理错误的方式" class="headerlink" title="处理错误的方式"></a>处理错误的方式</h1><h2 id="经典GO逻辑"><a href="#经典GO逻辑" class="headerlink" title="经典GO逻辑"></a>经典GO逻辑</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">顺序处理每一步的error</span><br></pre></td></tr></table></figure>

<h2 id="屏蔽过程中的-error-的处理"><a href="#屏蔽过程中的-error-的处理" class="headerlink" title="屏蔽过程中的 error 的处理"></a>屏蔽过程中的 error 的处理</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">将error 保存到对象内部，处理逻辑交给每个方法，本质上仍是顺序执行</span><br></pre></td></tr></table></figure>

<h2 id="利用函数式编程延迟运行"><a href="#利用函数式编程延迟运行" class="headerlink" title="利用函数式编程延迟运行"></a>利用函数式编程延迟运行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">错误交由调用方处理</span><br></pre></td></tr></table></figure>

<h1 id="三层架构错误处理"><a href="#三层架构错误处理" class="headerlink" title="三层架构错误处理"></a>三层架构错误处理</h1><p>结合 <a href="http://github.com/pkg/errors">github.com&#x2F;pkg&#x2F;errors</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Dao 层使用 Wrap 上抛错误</span><br><span class="line"></span><br><span class="line">Service 层追加信息</span><br><span class="line"></span><br><span class="line">MiddleWare 统一打印错误日志</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
      </tags>
  </entry>
</search>
